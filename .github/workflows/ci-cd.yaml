name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'part1-docker-k8s/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'part1-docker-k8s/**'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: evgenyglinsky/devsecops-multilang
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Hadolint (Dockerfile Linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: part1-docker-k8s/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Run Checkov (Infrastructure as Code Security)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: part1-docker-k8s/k8s
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: checkov-results.sarif

  # Build and Test
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: part1-docker-k8s
        file: part1-docker-k8s/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python3 -c "
        import sys
        print('Python 3 version:', sys.version)
        import numpy, pandas, matplotlib
        print('Python packages OK')
        "
        
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} python2 -c "
        import sys
        print('Python 2 version:', sys.version)
        import numpy, pandas
        print('Python 2 packages OK')
        "
        
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} R --slave -e "
        cat('R version:', R.version.string, '\n')
        library(ggplot2)
        library(dplyr)
        cat('R packages OK\n')
        "

  # Vulnerability Scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-test
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (JSON)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'json'
        output: 'trivy-results.json'

    - name: Check for critical vulnerabilities
      run: |
        CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
        HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json)
        
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found. Failing build."
          exit 1
        fi
        
        if [ "$HIGH_COUNT" -gt 10 ]; then
          echo "⚠️ Too many high vulnerabilities found ($HIGH_COUNT > 10). Consider remediation."
        fi

    - name: Upload vulnerability scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-reports
        path: |
          trivy-results.json
          trivy-results.sarif

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-test, vulnerability-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update image tag in deployment
      run: |
        sed -i "s|image: evgenyglinsky/devsecops-multilang:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" part1-docker-k8s/k8s/deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f part1-docker-k8s/k8s/namespace.yaml
        kubectl apply -f part1-docker-k8s/k8s/
        kubectl rollout status deployment/multilang-dev-env -n devsecops-eval --timeout=300s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n devsecops-eval
        kubectl get services -n devsecops-eval
        kubectl describe deployment multilang-dev-env -n devsecops-eval

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, vulnerability-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Update image tag in deployment
      run: |
        sed -i "s|image: evgenyglinsky/devsecops-multilang:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" part1-docker-k8s/k8s/deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f part1-docker-k8s/k8s/namespace.yaml
        kubectl apply -f part1-docker-k8s/k8s/
        kubectl rollout status deployment/multilang-dev-env -n devsecops-eval --timeout=300s

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n devsecops-eval
        kubectl get services -n devsecops-eval
        kubectl describe deployment multilang-dev-env -n devsecops-eval

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        POD_NAME=$(kubectl get pods -n devsecops-eval -l app=multilang-dev-env -o jsonpath='{.items[0].metadata.name}')
        
        echo "Testing Python 3..."
        kubectl exec -n devsecops-eval $POD_NAME -- python3 -c "import sys; print('Python 3 OK:', sys.version)"
        
        echo "Testing Python 2..."
        kubectl exec -n devsecops-eval $POD_NAME -- python2 -c "import sys; print('Python 2 OK:', sys.version)"
        
        echo "Testing R..."
        kubectl exec -n devsecops-eval $POD_NAME -- R --slave -e "cat('R OK:', R.version.string, '\n')"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
    - name: Clean up old images
      run: |
        echo "Cleanup completed"
