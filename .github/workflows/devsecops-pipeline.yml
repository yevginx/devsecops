name: DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'part1-docker-k8s/**'
      - '.github/workflows/devsecops-pipeline.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'part1-docker-k8s/**'
      - '.github/workflows/devsecops-pipeline.yml'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: glinsky/devsecops-multilang

jobs:
  lint:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Hadolint (Dockerfile)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: part1-docker-k8s/Dockerfile
          config: .hadolint.yaml
          format: sarif
          output-file: hadolint-results.sarif
          failure-threshold: error

      - name: Upload Hadolint SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

      - name: Checkov (Kubernetes manifests)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: part1-docker-k8s/k8s
          framework: kubernetes
          output_format: sarif
          output_file_path: checkov-results.sarif
        continue-on-error: true

      - name: Upload Checkov SARIF
        if: always() && hashFiles('checkov-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  build:
    name: Build, Push & Scan
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      image-ref: ${{ steps.refs.outputs.image_ref }}
      version-tag: ${{ steps.version.outputs.tag }}
      published-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read image version
        id: version
        run: |
          tag=$(cat part1-docker-k8s/VERSION | tr -d '\n')
          echo "tag=${tag}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=${{ steps.version.outputs.tag }}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: part1-docker-k8s
          file: part1-docker-k8s/Dockerfile
          # Build for amd64 to match GitHub Actions runner and most production environments
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Capture image reference
        id: refs
        run: |
          if [ -n "${{ steps.build.outputs.digest }}" ]; then
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}@${{ steps.build.outputs.digest }}"
          else
            IMAGE_REF="${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.tag }}"
          fi
          echo "Using image reference: $IMAGE_REF"
          echo "image_ref=$IMAGE_REF" >> "$GITHUB_OUTPUT"

      - name: Trivy vulnerability scan (SARIF)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.refs.outputs.image_ref }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true

      - name: Upload Trivy SARIF
        if: github.event_name != 'pull_request' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Docker Scout CVE scan
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.refs.outputs.image_ref }}
          platform: linux/amd64
          sarif-file: scout-results.sarif

      - name: Upload Docker Scout SARIF
        if: github.event_name != 'pull_request' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scout-results.sarif

  vulnerability-summary:
    name: Vulnerability Summary
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug image reference
        run: |
          echo "Image reference from build job: ${{ needs.build.outputs['image-ref'] }}"

      - name: Trivy vulnerability scan (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs['image-ref'] }}
          format: json
          output: trivy-results.json

      - name: Summarise vulnerabilities
        run: |
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json)
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json)
          echo "Critical vulnerabilities: ${CRITICAL}"
          echo "High vulnerabilities: ${HIGH}"
          echo "Medium vulnerabilities: ${MEDIUM}"
          if [ "$CRITICAL" -gt 0 ]; then
            echo "::error::Critical vulnerabilities detected"
            exit 1
          fi

      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            trivy-results.json
            trivy-results.sarif
            scout-results.sarif

  package:
    name: Package Manifests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare deployment bundle
        env:
          IMAGE_REFERENCE: ${{ needs.build.outputs['image-ref'] }}
          IMAGE_TAG: ${{ needs.build.outputs.version-tag }}
        run: |
          mkdir -p deployment-package/k8s
          cp -r part1-docker-k8s/k8s/*.yaml deployment-package/k8s/
          python3 - <<'PY'
          import os
          from pathlib import Path
          
          path = Path('deployment-package/k8s/deployment.yaml')
          image_ref = os.environ['IMAGE_REFERENCE']
          lines = path.read_text().splitlines()
          with path.open('w') as fh:
              for line in lines:
                  if line.strip().startswith('image: glinsky/devsecops-multilang'):
                      fh.write('        image: ' + image_ref + '\n')
                  else:
                      fh.write(line + '\n')
          PY
          printf "Image (tag): %s\nImage (digest): %s\nCommit: %s\nBuild Date: %s\n" \
            "$IMAGE_TAG" "$IMAGE_REFERENCE" "$GITHUB_SHA" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            > deployment-package/deployment-info.txt

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: k8s-deployment-package
          path: deployment-package/
          retention-days: 30
